export const abi = [
  {
    inputs: [
      {
        internalType: "contract IMorpho",
        name: "morpho",
        type: "address",
      },
      { internalType: "Id[]", name: "ids", type: "bytes32[]" },
      {
        internalType: "contract IAdaptiveCurveIrm",
        name: "adaptiveCurveIrm",
        type: "address",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "loanToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "collateralToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "oracle",
                type: "address",
              },
              { internalType: "address", name: "irm", type: "address" },
              {
                internalType: "uint256",
                name: "lltv",
                type: "uint256",
              },
            ],
            internalType: "struct MarketParams",
            name: "marketParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "totalSupplyAssets",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "totalSupplyShares",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "totalBorrowAssets",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "totalBorrowShares",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "lastUpdate",
                type: "uint128",
              },
              { internalType: "uint128", name: "fee", type: "uint128" },
            ],
            internalType: "struct Market",
            name: "market",
            type: "tuple",
          },
          { internalType: "bool", name: "hasPrice", type: "bool" },
          { internalType: "uint256", name: "price", type: "uint256" },
          {
            internalType: "uint256",
            name: "rateAtTarget",
            type: "uint256",
          },
        ],
        internalType: "struct MarketResponse[]",
        name: "res",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x60808060405234601557610608908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c63e578f7a814610024575f80fd5b346101f45760603660031901126101f4576004356001600160a01b038116908190036101f4576024359067ffffffffffffffff82116101f457366023830112156101f45781600401359067ffffffffffffffff82116101f4573660248360051b850101116101f4576044356001600160a01b03811693908490036101f4576100ab83610592565b6100b86040519182610570565b838152601f196100c785610592565b015f5b81811061049f5750505f5b848110156103aa578060051b906024828501013591835182101561039657830160200151604051632c3c915760e01b81526004810184905260a0816024818a5afa908115610200575f91610312575b508152604051632e3071cd60e11b81526004810184905260c0816024818a5afa908115610200575f91610276575b5060208201528051604001516001600160a01b03168061020b575b508051606001516001600160a01b0316881461018f575b5060019150016100d5565b604051926301977b5760e01b845260048401526020836024818b5afa928315610200575f936101c8575b5091608060019301525f610184565b92506020833d82116101f8575b816101e260209383610570565b810103126101f45791519160806101b9565b5f80fd5b3d91506101d5565b6040513d5f823e3d90fd5b60206004916040519283809263501ad8ff60e11b82525afa5f9181610243575b501561016d576001604083015260608201525f61016d565b9091506020813d821161026e575b8161025e60209383610570565b810103126101f45751905f61022b565b3d9150610251565b905060c0813d821161030a575b8161029060c09383610570565b810103126101f4576102ff60a0604051926102aa84610554565b6102b3816105be565b84526102c1602082016105be565b60208501526102d2604082016105be565b60408501526102e3606082016105be565b60608501526102f4608082016105be565b6080850152016105be565b60a08201525f610152565b3d9150610283565b905060a0813d821161038e575b8161032c60a09383610570565b810103126101f45760806040519161034383610524565b61034c816105aa565b835261035a602082016105aa565b602084015261036b604082016105aa565b604084015261037c606082016105aa565b6060840152015160808201525f610124565b3d915061031f565b634e487b7160e01b5f52603260045260245ffd5b506040518091602082016020835281518091526020604084019201905f5b8181106103d6575050500390f35b8251805180516001600160a01b0390811687526020808301518216818901526040808401518316818a0152606080850151909316838a0152608093840151848a01528185015180516001600160801b0390811660a0808d019190915282850151821660c08d015282840151821660e08d01528286015182166101008d01528287015182166101208d015290910151166101408a01528401511515610160890152908301516101808801529101516101a08601528695506101c090940193909201916001016103c8565b6020906040516104ae81610524565b6040516104ba81610524565b5f81525f848201525f60408201525f60608201525f608082015281526040516104e281610554565b5f81525f848201525f60408201525f60608201525f60808201525f60a0820152838201525f60408201525f60608201525f6080820152828286010152016100ca565b60a0810190811067ffffffffffffffff82111761054057604052565b634e487b7160e01b5f52604160045260245ffd5b60c0810190811067ffffffffffffffff82111761054057604052565b90601f8019910116810190811067ffffffffffffffff82111761054057604052565b67ffffffffffffffff81116105405760051b60200190565b51906001600160a01b03821682036101f457565b51906001600160801b03821682036101f45756fea26469706673582212204dc603d902c989a06a1c8ea9d0e715c1c72d0723213c8a44a9cf8a34872b1de564736f6c634300081b0033";
