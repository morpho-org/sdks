export const abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20Permit",
            name: "token",
            type: "address",
          },
          { internalType: "address", name: "user", type: "address" },
          {
            internalType: "bool",
            name: "isWrappedBackedToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isErc20Permissioned",
            type: "bool",
          },
        ],
        internalType: "struct HoldingRequest[]",
        name: "reqs",
        type: "tuple[]",
      },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "generalAdapter1",
        type: "address",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "generalAdapter1",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              { internalType: "uint48", name: "nonce", type: "uint48" },
            ],
            internalType: "struct Permit2Allowance",
            name: "permit2BundlerAllowance",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          {
            internalType: "enum OptionalBoolean",
            name: "canTransfer",
            type: "uint8",
          },
        ],
        internalType: "struct HoldingResponse[]",
        name: "res",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x608080604052346015576108f9908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c630e8f2dd214610024575f80fd5b346104cd5760803660031901126104cd5760043567ffffffffffffffff81116104cd57366023820112156104cd57806004013567ffffffffffffffff81116104cd573660248260071b840101116104cd576024356001600160a01b03811681036104cd576044356001600160a01b03811691908290036104cd57606435936001600160a01b038516908186036104cd576100bd85610849565b906100cb6040519283610827565b858252601f196100da87610849565b015f5b8181106107af5750505f5b868110156106dd578060071b820190608060231983360301126104cd576040516080810181811067ffffffffffffffff8211176106c95760405260248301356001600160a01b03811681036104cd5781526044830135906001600160a01b03821682036104cd576020810191825261017560846101676064870161087f565b95604084019687520161087f565b936060820194855286518410156106b5576020600585901b8801810151835185516040516370a0823160e01b81526001600160a01b0391821660048201529298939183916024918391165afa9081156105e0575f91610684575b50865282518451604051636eb1769f60e11b81526001600160a01b0391821660048201528c821660248201529160209183916044918391165afa9081156105e0575f91610653575b5083518551604051636eb1769f60e11b81526001600160a01b0391821660048201528e821660248201529160209183916044918391165afa80156105e0578f915f9161061e575b5085518751604051636eb1769f60e11b81526001600160a01b039182166004820152938116602485015260209184916044918391165afa9182156105e0575f926105eb575b50604051926102b18461080b565b835260208084019190915260408084019290925288019190915284518451915163927da10560e01b81526001600160a01b03918216600482015291166024820152604481018a90526060816064818f5afa9081156105e0575f9161056c575b50604087810191909152835185519151623f675f60e91b81526001600160a01b0392831660048201529160209183916024918391165afa5f9181610539575b50610527575b5082518451604051624b894760e91b81526001600160a01b0391821660048201529160209183916024918391165afa5f9181610507575b506104e3575051156104d9576103a760015b60a087016108b7565b516103b9575b505060019150016100e8565b5f60a0949094019384525160405163650369bf60e01b81529390602090859060049082906001600160a01b03165afa91825f9361048f575b60019550610400575b506103ad565b51604051633af32abf60e01b815260a086901b86900391821660048201529260209184916024918391165afa5f928161045f575b50610440575b806103fa565b6104519115610458576002906108b7565b5f8061043a565b83906108b7565b61048191935060203d8111610488575b6104798183610827565b81019061089f565b915f610434565b503d61046f565b9250936020813d82116104d1575b816104aa60209383610827565b810103126104cd5751936001600160a01b03851685036104cd57600194926103f1565b5f80fd5b3d915061049d565b6103a7600261039e565b1590506104fd576104f8600260a087016108b7565b6103a7565b6104f8600161039e565b61052091925060203d8111610488576104798183610827565b905f61038c565b6001606088015260808701525f610355565b9091506020813d8211610564575b8161055460209383610827565b810103126104cd5751905f61034f565b3d9150610547565b90506060813d82116105d8575b8161058660609383610827565b810103126104cd576040519061059b8261080b565b80516001600160a01b03811681036104cd576105cd9160409184526105c26020820161088c565b60208501520161088c565b60408201525f610310565b3d9150610579565b6040513d5f823e3d90fd5b9091506020813d8211610616575b8161060660209383610827565b810103126104cd5751905f6102a3565b3d91506105f9565b9150506020813d821161064b575b8161063960209383610827565b810103126104cd57518e90602061025e565b3d915061062c565b90506020813d821161067c575b8161066d60209383610827565b810103126104cd57515f610217565b3d9150610660565b90506020813d82116106ad575b8161069e60209383610827565b810103126104cd57515f6101cf565b3d9150610691565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b82604051602081019160208252805180935260206040830191015f935b8085106107075783830384f35b909160a083518051835260406020820151805160208601526020810151828601520151606084015265ffffffffffff604080830151600180861b038151166080870152826020820151168587015201511660c08401526060810151151560e08401526080810151610100840152015190600382101561079b57610140816001936101206020940152019301940193906106fa565b634e487b7160e01b5f52602160045260245ffd5b6040519060c082019180831067ffffffffffffffff8411176106c9576020926040525f81526107dc610861565b838201526107e8610861565b60408201525f60608201525f60808201525f60a0820152828287010152016100dd565b6060810190811067ffffffffffffffff8211176106c957604052565b90601f8019910116810190811067ffffffffffffffff8211176106c957604052565b67ffffffffffffffff81116106c95760051b60200190565b6040519061086e8261080b565b5f6040838281528260208201520152565b359081151582036104cd57565b519065ffffffffffff821682036104cd57565b908160209103126104cd575180151581036104cd5790565b600382101561079b575256fea2646970667358221220a082586ddb70bfcbb8d957ef27522d5b0df1e8cd9200fe706071cb678a6cd6f364736f6c634300081b0033";
