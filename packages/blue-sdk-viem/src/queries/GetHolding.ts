export const abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20Permit",
            name: "token",
            type: "address",
          },
          { internalType: "address", name: "user", type: "address" },
          {
            internalType: "bool",
            name: "isWrappedBackedToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isErc20Permissioned",
            type: "bool",
          },
        ],
        internalType: "struct HoldingRequest",
        name: "req",
        type: "tuple",
      },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "generalAdapter1",
        type: "address",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "generalAdapter1",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              { internalType: "uint48", name: "nonce", type: "uint48" },
            ],
            internalType: "struct Permit2Allowance",
            name: "permit2BundlerAllowance",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          {
            internalType: "enum OptionalBoolean",
            name: "canTransfer",
            type: "uint8",
          },
        ],
        internalType: "struct HoldingResponse",
        name: "res",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x60808060405234601557610802908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c634b97c9ff14610025575f80fd5b3461050f57366003190160e0811261050f5760801361050f576084356001600160a01b038116810361050f5760a4356001600160a01b0381169081900361050f5760c435916001600160a01b03831680840361050f5760c0850185811067ffffffffffffffff8211176106f9576040525f855260208501906100a561074b565b825260408601906100b461074b565b825260608701935f855260808801955f875260a08901975f895260018060a01b036100dd610769565b1660206100e861077f565b6040516370a0823160e01b81526001600160a01b03909116600482015291829060249082905afa90811561061a575f916106c5575b508a52610174926020906001600160a01b03610137610769565b1661014061077f565b604051636eb1769f60e11b81526001600160a01b039182166004820152921660248301529094859190829081906044820190565b03915afa90811561061a575f9161068f575b6101db93506020836001600160a01b0361019e610769565b166101a761077f565b604051636eb1769f60e11b81526001600160a01b039182166004820152921660248301529095869190829081906044820190565b03915afa93841561061a575f9461065a575b5061020693906020906001600160a01b0361019e610769565b03915afa90811561061a575f91610625575b60609450604051926102298461070d565b8352602083015260408201528552606461024161077f565b6001600160a01b03610251610769565b60405163927da10560e01b81526001600160a01b0390931660048401521660248201526044810194909452839182905afa90811561061a575f916105a5575b5081526001600160a01b036102a3610769565b1660206102ae61077f565b604051623f675f60e91b81526001600160a01b03909116600482015291829060249082905afa5f9181610571575b50610565575b506001600160a01b036102f3610769565b1660206102fe61077f565b604051624b894760e91b81526001600160a01b03909116600482015291829060249082905afa5f9181610544575b506105255750606435801515810361050f571561051b5761034f60015b866107c0565b604435801515810361050f576103e8575b6040908165ffffffffffff9381519851895251805160208a01526020810151828a0152015160608801525160018060a01b0381511660808801528260208201511660a088015201511660c085015251151560e084015251610100830152519060038210156103d45761014091610120820152f35b634e487b7160e01b5f52602160045260245ffd5b5f8552600460206001600160a01b036103ff610769565b166040519283809263650369bf60e01b82525afa5f91816104cb575b5065ffffffffffff9360409392849261043a575b509350509050610360565b602061044461077f565b8451633af32abf60e01b81526001600160a01b0391821660048201529283916024918391165afa5f918161049a575b501561042f57156104905761048a60025b896107c0565b5f61042f565b61048a6001610484565b6104bd91925060203d6020116104c4575b6104b58183610729565b8101906107a8565b905f610473565b503d6104ab565b909291506020813d602011610513575b816104e860209383610729565b8101031261050f57516001600160a01b038116810361050f57909165ffffffffffff61041b565b5f80fd5b3d91506104db565b61034f6002610349565b1561053a576105356002866107c0565b61034f565b6105356001610349565b61055e91925060203d6020116104c4576104b58183610729565b905f61032c565b6001845284525f6102e2565b9091506020813d60201161059d575b8161058d60209383610729565b8101031261050f5751905f6102dc565b3d9150610580565b90506060813d606011610612575b816105c060609383610729565b8101031261050f57604051906105d58261070d565b80516001600160a01b038116810361050f576106079160409184526105fc60208201610795565b602085015201610795565b60408201525f610290565b3d91506105b3565b6040513d5f823e3d90fd5b90506020843d602011610652575b8161064060209383610729565b8101031261050f576060935190610218565b3d9150610633565b93506020843d602011610687575b8161067560209383610729565b8101031261050f5792519260206101ed565b3d9150610668565b90506020833d6020116106bd575b816106aa60209383610729565b8101031261050f576101db925190610186565b3d915061069d565b90506020813d6020116106f1575b816106e060209383610729565b8101031261050f575161017461011d565b3d91506106d3565b634e487b7160e01b5f52604160045260245ffd5b6060810190811067ffffffffffffffff8211176106f957604052565b90601f8019910116810190811067ffffffffffffffff8211176106f957604052565b604051906107588261070d565b5f6040838281528260208201520152565b6004356001600160a01b038116810361050f5790565b6024356001600160a01b038116810361050f5790565b519065ffffffffffff8216820361050f57565b9081602091031261050f5751801515810361050f5790565b60038210156103d4575256fea2646970667358221220e3c9d0616268aa78edb55ebc5ed676628829db8ec9058b4cb2146edcd07b518064736f6c634300081b0033";
